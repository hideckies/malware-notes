---
const { frontmatter } = Astro.props;
---

<table>
    <tbody>
        {frontmatter.identified ? (
            <tr>
                <th scope="row">Identified</th>
                <td>
                    <a
                        href={`/malware-families/years/${frontmatter.identified}`}
                        class="underline text-slate-300 hover:text-white"
                    >
                        {frontmatter.identified}
                    </a>
                </td>
            </tr>
        ) : null}
        {frontmatter.types ? (
            <tr>
                <th scope="row">Types</th>
                <td>
                    {frontmatter.types.map((t: string, idx: number) => (
                        <>
                        <a
                            href={`/malware-families/types/${t}`}
                            class="underline text-slate-300 hover:text-white"
                        >
                            {t}
                        </a>
                        {idx == frontmatter.types.length-1 ? null : <span>, </span>}
                        </>
                    ))}
                </td>
            </tr>
        ) : null}
        {frontmatter.platforms ? (
            <tr>
                <th scope="row">Platforms</th>
                <td>
                    {frontmatter.platforms.map((platform: string, idx: number) => (
                        <>
                        <a
                            href={`/malware-families/platforms/${platform}`}
                            class="underline text-slate-300 hover:text-white"
                        >
                            {platform}
                        </a>
                        {idx == frontmatter.platforms.length-1 ? null : <span>, </span>}
                        </>
                    ))}
                </td>
            </tr>
        ) : null}
        {frontmatter.developers ? (
            <tr>
                <th scope="row">Developers</th>
                <td>
                    <span>{frontmatter.developers.join(', ')}</span>
                </td>
            </tr>
        ) : null}
        {frontmatter.actors ? (
            <tr>
                <th scope="row">Actors</th>
                <td>
                    {frontmatter.actors.map((actor: string, idx: number) => (
                        <>
                        <a
                            href={`/threat-actors/${actor.toLowerCase().replace(/[^a-z0-9-_]/g, '')}.html`}
                            class="underline text-slate-300 hover:text-white"
                        >
                            {actor}
                        </a>
                        {idx == frontmatter.actors.length-1 ? null : <span>, </span>}
                        </>
                    ))}
                </td>
            </tr>
        ) : null}
        {frontmatter.attack_vectors ? (
            <tr>
                <th scope="row">Attack Vectors</th>
                <td>
                    {frontmatter.attack_vectors.map((vector: string, idx: number) => (
                        <>
                        <a
                            href={`/malware-families/attack-vectors/${vector}`}
                            class="underline text-slate-300 hover:text-white"
                        >
                            {vector}
                        </a>
                        {idx == frontmatter.attack_vectors.length-1 ? null : <span>, </span>}
                        </>
                    ))}
                </td>
            </tr>
        ) : null}
        {frontmatter.langs ? (
            <tr>
                <th scope="row">Languages</th>
                <td>
                    {frontmatter.langs.map((lang: string, idx: number) => (
                        <>
                        <a
                            href={`/malware-families/langs/${lang}`}
                            class="underline text-slate-300 hover:text-white"
                        >
                            {lang == 'CS' ? 'C#' : lang}
                        </a>
                        {idx == frontmatter.langs.length-1 ? null : <span>, </span>}
                        </>
                    ))}
                </td>
            </tr>
        ) : null}
        {frontmatter.features ? (
            <tr>
                <th scope="row">Features</th>
                <td>
                    {frontmatter.features.map((feature: string, idx: number) => (
                        <>
                        <a
                            href={`/malware-families/features/${feature}`}
                            class="underline text-slate-300 hover:text-white"
                        >
                            {feature}
                        </a>
                        {idx == frontmatter.features.length-1 ? null : <span>, </span>}
                        </>
                    ))}
                </td>
            </tr>
        ) : null}
        {frontmatter.targets ? (
            <tr>
                <th scope="row">Targets</th>
                <td>
                    <span>{frontmatter.targets.join(', ')}</span>
                </td>
            </tr>
        ) : null}
        {frontmatter.notes ? (
            <tr>
                <th scope="row">Notes</th>
                <td>
                    <ul>
                        {frontmatter.notes.map((note: string) => (
                            <li>{note}</li>
                        ))}
                    </ul>
                </td>
            </tr>
        ) : null}
        {frontmatter.yara_rules ? (
            <tr>
                <th scope="row">Yara Rules</th>
                <td>
                    <ul>
                        {frontmatter.yara_rules.map((yara: string) => (
                            <li>
                                <a
                                    href={yara}
                                    target="_blank"
                                    rel="noopener noreferrer"
                                    class="underline text-slate-300 hover:text-white"
                                >
                                    {yara}
                                </a>
                            </li>
                        ))}
                    </ul>
                </td>
            </tr>
        ) : null}
    </tbody>
</table>