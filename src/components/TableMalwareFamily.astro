---
const { frontmatter } = Astro.props;
---

<table>
    <tbody>
        {frontmatter.identified ? (
            <tr>
                <th scope="row">Identified</th>
                <td>
                    <span>{frontmatter.identified}</span>
                </td>
            </tr>
        ) : null}
        {frontmatter.types ? (
            <tr>
                <th scope="row">Types</th>
                <td>
                    <span>{frontmatter.types.join(', ')}</span>
                </td>
            </tr>
        ) : null}
        {frontmatter.platforms ? (
            <tr>
                <th scope="row">Platforms</th>
                <td>
                    <span>{frontmatter.platforms.join(', ')}</span>
                </td>
            </tr>
        ) : null}
        {frontmatter.developers ? (
            <tr>
                <th scope="row">Developers</th>
                <td>
                    <span>{frontmatter.developers.join(', ')}</span>
                </td>
            </tr>
        ) : null}
        {frontmatter.actors ? (
            <tr>
                <th scope="row">Actors</th>
                <td>
                    {frontmatter.actors.map((actor: string, idx: number) => (
                        <>
                        <a
                            href={`/threat-actors/${actor.toLowerCase().replace(' ', '')}.html`}
                            class="underline text-slate-300 hover:text-white"
                        >
                            {actor}
                        </a>
                        {idx == frontmatter.actors.length-1 ? null : <span>, </span>}
                        </>
                    ))}
                </td>
            </tr>
        ) : null}
        {frontmatter.initial_vectors ? (
            <tr>
                <th scope="row">Initial Vectors</th>
                <td>
                    <span>{frontmatter.initial_vectors.join(', ')}</span>
                </td>
            </tr>
        ) : null}
        {frontmatter.langs ? (
            <tr>
                <th scope="row">Languages</th>
                <td>
                    <span>{frontmatter.langs.join(', ')}</span>
                </td>
            </tr>
        ) : null}
        {frontmatter.features ? (
            <tr>
                <th scope="row">Features</th>
                <td>
                    <ul>
                        {frontmatter.features.map((feature: string) => (
                            <li>{feature}</li>
                        ))}
                    </ul>
                </td>
            </tr>
        ) : null}
        {frontmatter.targets ? (
            <tr>
                <th scope="row">Targets</th>
                <td>
                    <span>{frontmatter.targets.join(', ')}</span>
                </td>
            </tr>
        ) : null}
        {frontmatter.notes ? (
            <tr>
                <th scope="row">Notes</th>
                <td>
                    <ul>
                        {frontmatter.notes.map((note: string) => (
                            <li>{note}</li>
                        ))}
                    </ul>
                </td>
            </tr>
        ) : null}
    </tbody>
</table>